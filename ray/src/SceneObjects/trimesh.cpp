#include "trimesh.h"
#include <assert.h>
#include <float.h>
#include <string.h>
#include <algorithm>
#include <cmath>
#include "../ui/TraceUI.h"
#include <stdio.h>
extern TraceUI* traceUI;

using namespace std;

Trimesh::~Trimesh()
{
	for (auto m : materials)
		delete m;
	for (auto f : faces)
		delete f;
}

// must add vertices, normals, and materials IN ORDER
void Trimesh::addVertex(const glm::dvec3& v)
{
	vertices.emplace_back(v);
}

void Trimesh::addMaterial(Material* m)
{
	materials.emplace_back(m);
}

void Trimesh::addNormal(const glm::dvec3& n)
{
	normals.emplace_back(n);
}

// Returns false if the vertices a,b,c don't all exist
bool Trimesh::addFace(int a, int b, int c)
{
	int vcnt = vertices.size();

	if (a >= vcnt || b >= vcnt || c >= vcnt)
		return false;

	TrimeshFace* newFace = new TrimeshFace(
	        scene, new Material(*this->material), this, a, b, c);
	newFace->setTransform(this->transform);
	if (!newFace->degen)
		faces.push_back(newFace);
	else
		delete newFace;

	// Don't add faces to the scene's object list so we can cull by bounding
	// box
	return true;
}

// Check to make sure that if we have per-vertex materials or normals
// they are the right number.
const char* Trimesh::doubleCheck()
{
	if (!materials.empty() && materials.size() != vertices.size())
		return "Bad Trimesh: Wrong number of materials.";
	if (!normals.empty() && normals.size() != vertices.size())
		return "Bad Trimesh: Wrong number of normals.";

	return 0;
}

bool Trimesh::intersectLocal(ray& r, isect& i) const
{
	bool have_one = false;
	for (auto face : faces) {
		isect cur;
		if (face->intersectLocal(r, cur)) {
			if (!have_one || (cur.getT() < i.getT())) {
				i = cur;
				have_one = true;
			}
		}
	}
	if (!have_one)
		i.setT(1000.0);
	return have_one;
}

bool TrimeshFace::intersect(ray& r, isect& i) const
{
	return intersectLocal(r, i);
}

// Intersect ray r with the triangle abc.  If it hits returns true,
// and put the parameter in t and the barycentric coordinates of the
// intersection in u (alpha) and v (beta).
bool TrimeshFace::intersectLocal(ray& r, isect& i) const
{
	// YOUR CODE HERE
	//
	// FIXME: Add ray-trimesh intersection
	glm::dvec3 a = parent->vertices[this->ids[0]];
	glm::dvec3 b = parent->vertices[this->ids[1]];
	glm::dvec3 c = parent->vertices[this->ids[2]];

	//find t
	glm::dvec3 normal = glm::normalize(glm::cross(b - a, c - a));
	double d = -1.0 * glm::dot (normal, a);
	double t =  -1.0 * ((glm::dot(normal, r.getPosition()) + d) / glm::dot(normal, r.getDirection())); 
	if (t <= RAY_EPSILON) {
		return false;
	}
	glm::dvec3 Q = r.at(t);

	//Inside-Outside test
	double i1 = glm::dot(glm::cross(b - a, Q - a), normal);
	double i2 = glm::dot(glm::cross(c - b, Q - b), normal);
	double i3 = glm::dot(glm::cross(a - c, Q - c), normal);
	if (i1 < RAY_EPSILON || i2 < RAY_EPSILON || i3 < RAY_EPSILON) {
		return false;
	}
	//Barycentric Coordinates/Interpolation
	double A_a = glm::length (glm::cross(c - b, Q - b)) / 2.0;
	double A_b = glm::length (glm::cross(a - c, Q - c)) / 2.0;
	double A_c = glm::length (glm::cross(b - a, Q - a)) / 2.0;
	double A = glm::length(glm::cross(b - a, c - a)) / 2.0;
	double alpha = A_a / A;
	double beta = A_b / A;
	double gamma = A_c / A;
	//check to make sure Q is in the triangle, floating point imprecision checked
	//for with RAY_EPSILON
	if (alpha >= 0.0 && beta >= 0.0 && gamma >= 0.0 && (alpha + beta + gamma <= 1.0 + RAY_EPSILON) && (alpha + beta + gamma >= 1.0 - RAY_EPSILON)) {
		i.setObject(this);
		//Normal Interpolation
		if (parent->vertNorms) {
			i.setN(glm::normalize( alpha * parent->normals[ids[0]] + beta * parent->normals[ids[1]] + gamma * parent->normals[ids[2]]));
		} else {
			i.setN(normal);
		}
		//Material Interpolation
		if (!parent->materials.empty()) {
			Material m_0(alpha * *parent->materials[ids[0]]);
			Material m_1(beta * *parent->materials[ids[1]]);
			Material m_2(gamma * *parent->materials[ids[2]]);
			m_0 += m_1;
			m_0 += m_2;
			i.setMaterial(m_0);
		} else {
			i.setMaterial(this->getMaterial());
		}
		i.setT(t);
		i.setUVCoordinates(glm::dvec2(alpha, beta));
		i.setBary(alpha, beta, gamma);
		return true;
	}


	return false;
}

// Once all the verts and faces are loaded, per vertex normals can be
// generated by averaging the normals of the neighboring faces.
void Trimesh::generateNormals()
{
	int cnt = vertices.size();
	normals.resize(cnt);
	std::vector<int> numFaces(cnt, 0);

	for (auto face : faces) {
		glm::dvec3 faceNormal = face->getNormal();

		for (int i = 0; i < 3; ++i) {
			normals[(*face)[i]] += faceNormal;
			++numFaces[(*face)[i]];
		}
	}

	for (int i = 0; i < cnt; ++i) {
		if (numFaces[i])
			normals[i] /= numFaces[i];
	}

	vertNorms = true;
}

